#####################################################################
# General Talker Configuration for ALSA and
# uncompressed 61883-6 audio mapping
#####################################################################

# role: Sets the process as a talker or listener. Valid values are
# talker or listener
role = listener

# initial_state: Specify whether the talker or listener should be
# running or stopped on startup.  Valid values are running or stopped.
# If not specified, the default will depend on how the talker or
# listener is launched.
initial_state = stopped

# stream_addr: Used on the listener and should be set to the
# mac address of the talker.
#stream_addr = 01:23:45:67:89:ab

# stream_uid: The unique stream ID. The talker and listener must
# both have this set the same.
#stream_uid = 0

# dest_addr: When SRP is being used the destination address only needs to
# be set in the talker.  If SRP is not being used the destination address
# needs to be set in both side the talker and listener.
# The destination is a multicast address, not a real MAC address, so it
# does not match the talker or listener's interface MAC.  There are
# several pools of those addresses for use by AVTP defined in 1722.
# At this time they need to be locally administered and must be in the range
# of 91:E0:F0:00:FE:00 - 91:E0:F0:00:FE:FF.
# Typically :00 for the first stream, :01 for the second, etc.
#dest_addr = 91:e0:f0:00:fe:00

# max_interval_frames: The maximum number of packets that will be sent during
# an observation interval. This is only used on the talker.
#max_interval_frames = 1

# max_transit_usec: Allows manually specifying a maximum transit time.
# On the talker this value is added to the PTP walltime to create the AVTP Timestamp.
# On the listener this value is used to validate an expected valid timestamp range.
# Note: For the listener the map_nv_item_count value must be set large enough to
# allow buffering at least as many AVTP packets that can be transmitted  during this
# max transit time.
max_transit_usec = 50000

# raw_tx_buffers: The number of raw socket transmit buffers. Typically 4 - 8 are good values.
# This is only used by the talker. If not set internal defaults are used.
#raw_tx_buffers = 1

# raw_rx_buffers: The number of raw socket receive buffers. Typically 50 - 100 are good values.
# This is only used by the listener. If not set internal defaults are used.
raw_rx_buffers = 200

# report_seconds: How often to output stats. Defaults to 10 seconds. 0 turns off the stats.
#report_seconds = 1

# Ethernet Interface Name. Only needed on some platforms when stack is built with no endpoint functionality
ifname = pcap:eth0

# Bit mask used for CPU pinning. Defaults to all cpus can be used (0xffffffff).
#thread_affinity = 12

# Enable real time scheduling with this priority. Defaults to not use RT sched (0).
thread_rt_priority = 10

#####################################################################
# Mapping module configuration
#####################################################################
# map_lib: The name of the library file (commonly a .so file) that
#  implements the Initialize function.  Comment out the map_lib name
#  and link in the .c file to the openavb_tl executable to embed the mapper
#  directly into the executable unit. There is no need to change anything
#  else. The Initialize function will still be dynamically linked in.
map_lib = ./libopenavb_map_uncmp_audio.so

# map_fn: The name of the initialize function in the mapper.
map_fn = openavbMapUncmpAudioInitialize

# map_nv_item_count: The number of media queue elements to hold.
map_nv_item_count = 400

# map_nv_tx_rate: Transmit rate.
# This must be set for the uncompressed audio mapping module.
map_nv_tx_rate = 8000

# map_nv_packing_factor: Multiple of how many packets of audio frames to place in a media queue item.
# Note: Typically when decreasing the map_nv_tx_rate the packing factor will also be decreased since
# the number of frames per packet will be increasing.
map_nv_packing_factor = 256

#####################################################################
# Interface module configuration
#####################################################################
# intf_lib: The name of the library file (commonly a .so file) that
#  implements the Initialize function.  Comment out the intf_lib name
#  and link in the .c file to the openavb_tl executable to embed the interface
#  directly into the executable unit. There is no need to change anything
#  else. The Initialize function will still be dynamically linked in.
# intf_fn: The name of the initialize function in the interface.
intf_lib = ./libopenavb_intf_alsa.so

# intf_fn: The name of the initialize function in the interface.
intf_fn = openavbIntfAlsaInitialize

# intf_nv_ignore_timestamp: If set the listener will ignore the timestamp on media queue items.
# intf_nv_ignore_timestamp = 1

# intf_nv_device_name: ALSA device name. Commonly "default" or "plug:dmix"
intf_nv_device_name = default

# intf_nv_audio_rate: Sampling rate of the audio (samples/second)
intf_nv_audio_rate = 48000

# intf_nv_audio_bit_depth: Number of bits per audio sample.  Typical values are 16, 24, and 32.
intf_nv_audio_bit_depth = 24

# intf_nv_audio_channels: Number of channels of audio.
intf_nv_audio_channels = 8

# intf_nv_allow_resampling: 0 = disable software resampling. 1 = allow software resampling. Default is disable.
intf_nv_allow_resampling = 1

# intf_nv_start_threshold_periods: The number of period to wait before starting playback. The larger the value to great
# the latency. The small the number the great chance for a buffer underrun. A good range is 1 - 5.
intf_nv_start_threshold_periods = 3

# intf_nv_period_time: the number of microseconds which should be set to unify latency between different platforms.
# This influence ALSA's period_time and period_size parameters and the result value should be the nearest possible.
# Initial playback latency is equal intf_nv_start_threshold_periods * intf_nv_period_time. If not set internal defaults are used.
# intf_nv_period_time = 0

# Default PC audio is little-endian
intf_nv_audio_endian = little

